[tox]
minversion = 1.6
skipsdist = True
envlist = py35,py34,py27,func,pep8

[testenv]
usedevelop = True
install_command = pip install -U -c{env:UPPER_CONSTRAINTS_FILE:https://opendev.org/openstack/requirements/raw/branch/stable/ocata/upper-constraints.txt} {opts} {packages}
setenv =
  VIRTUAL_ENV={envdir}
  OS_TEST_PATH=./ironic_python_agent/tests/unit
  LANGUAGE=en_US
  LC_ALL=en_US.utf-8
deps = -r{toxinidir}/test-requirements.txt
commands = ostestr {posargs}

[testenv:func]
usedevelop = True
# Define virtualenv directory, port to use for functional testing, and number
# of seconds to wait for the agent to come alive during functional testing.
setenv =
  VIRTUAL_ENV={envdir}
  OS_TEST_PATH=./ironic_python_agent/tests/functional
  TEST_PORT=9999
  IPA_WAIT_TRIES=100
commands = ostestr {posargs}

[testenv:pep8]
whitelist_externals = bash
commands =
  flake8 {posargs:ironic_python_agent imagebuild}
  # Run bashate during pep8 runs to ensure violations are caught by
  # the check and gate queues.
  {toxinidir}/tools/run_bashate.sh {toxinidir}
  doc8 doc/source README.rst

[testenv:cover]
setenv = VIRTUAL_ENV={envdir}
commands =
  python setup.py test --coverage --coverage-package-name ironic_python_agent {posargs}

[testenv:venv]
setenv = PYTHONHASHSEED=0
commands = {posargs:}

[testenv:devenv]
envdir = devenv
usedevelop = True

[testenv:docs]
setenv = PYTHONHASHSEED=0
sitepackages = False
envdir = {toxworkdir}/venv
commands =
  python setup.py build_sphinx

[testenv:releasenotes]
envdir = {toxworkdir}/venv
commands = sphinx-build -a -E -W -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[flake8]
ignore = E129
exclude = .venv,.git,.tox,dist,doc,*lib/python*,*egg,build,tools,imagebuild/tinyipa/tinyipafinal,imagebuild/tinyipa/tinyipabuild
# [H106] Donâ€™t put vim configuration in source files.
# [H203] Use assertIs(Not)None to check for None.
# [H904] Delay string interpolations at logging calls.
enable-extensions=H106,H203,H904

[hacking]
import_exceptions = ironic.openstack.common.gettextutils._,testtools.matchers

[testenv:checkconfig]
sitepackages = False
envdir = {toxworkdir}/venv
commands =
  {toxinidir}/tools/config/check_uptodate.sh

[testenv:genconfig]
sitepackages = False
envdir = {toxworkdir}/venv
commands =
  oslo-config-generator --config-file=tools/config/ipa-config-generator.conf

